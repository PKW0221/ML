# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1glrH81V89yHSiKTsZWaPvGYCtRX9mKTl
"""

! unzip train.zip

! unzip test.zip

from PIL import Image
from glob import glob
import numpy as np
import os

# from PIL import ImageFile
# ImageFile.LOAD_TRUNCATED_IMAGES = True


label_dict = {
    "downdog":0,
    "goddess":1,
    "mountain":2,
    "tree":3,
    "warrior1":4,
    "warrior2":5
}

label_list = []
img_list = []
for label_path in glob("./train/*"):
    for img_path in glob(label_path + "/*"):
        image = np.array(Image.open(img_path).convert("RGB").resize((75,75)))
        img_list.append(image)
        label_list.append(label_dict[os.path.basename(label_path)])

label_list = np.array(label_list)
img_list = np.array(img_list)

# label_list = label_list.astype(float)
# img_list = img_list.astype(float)

print(label_list.shape,img_list.shape)
np.bincount(label_list)

# Your Code Here

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(img_list, label_list, test_size=0.1, random_state=1213)

X_train.shape, y_train.shape, X_test.shape, y_test.shape

import tensorflow as tf

# Functional API
inp = tf.keras.layers.Input([75,75,3]) 
x = tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation="relu")(inp)
x = tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation="relu")(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation="relu")(x)
x = tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation="relu")(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), activation="relu")(x)
x = tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), activation="relu")(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Flatten()(x)
x = tf.keras.layers.Dense(64, activation="relu")(x)
x = tf.keras.layers.Dense(32, activation="relu")(x)
out = tf.keras.layers.Dense(6, activation="softmax")(x)

model = tf.keras.Model(inp, out)
model.summary()

# Your Code Here
adam = tf.keras.optimizers.Adam(learning_rate=0.001)
# For Integer Vector
sce_loss = tf.keras.losses.SparseCategoricalCrossentropy()

# For one-hot vector
ce_loss = tf.keras.losses.CategoricalCrossentropy()

model.compile(
    optimizer = adam,
    loss = sce_loss,
    metrics=["acc"]
)

model.fit(
    X_train, y_train,
    epochs=20,
    batch_size=20,
    validation_split=0.2
)

pred = model.predict(X_test)

from sklearn.metrics import classification_report
print(classification_report(np.argmax(pred, axis=1), y_test))

"""**test**"""

img1_list=[]
id_list=[]
# for label_path in glob("./train/*"):
#     for img_path in glob(label_path + "/*"):
#         image = np.array(Image.open(img_path).convert("RGB").resize((75,75)))
#         img_list.append(image)
#         label_list.append(label_dict[os.path.basename(label_path)])

for id_path in glob("./test/*"):    
  for img_path in glob(id_path ):
    image = np.array(Image.open(img_path).convert("RGB").resize((80,80)))
    img1_list.append(image)
    id_list.append(os.path.basename(id_path))

id_list = np.array(id_list)
img1_list = np.array(img1_list)

print(img1_list.shape, id_list.shape)

pred_123=model.predict(img1_list)

pred_123=np.argmax(pred_123, axis=1)

pred_123.shape

import pandas as pd
csv = pd.DataFrame({'id':id_list, 'category':pred_123})
csv.to_csv("Second_Project.csv",index=False)